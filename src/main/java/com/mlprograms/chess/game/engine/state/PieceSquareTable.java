/*
 * Copyright (c) 2024 Max Lemberg.
 * This file is part of ChessMax.
 * Licensed under the CC BY-NC 4.0 License.
 * See "http://creativecommons.org/licenses/by-nc/4.0/".
 */

package com.mlprograms.chess.game.engine.state;

import java.util.Arrays;

/**
 * Provides piece-square tables for evaluating the positional value of chess pieces.
 */
public class PieceSquareTable {

	public static final int[][] PAWNS = {
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 50, 50, 50, 50, 50, 50, 50, 50 },
		{ 10, 10, 20, 30, 30, 20, 10, 10 },
		{ 5, 5, 10, 25, 25, 10, 5, 5 },
		{ 0, 0, 0, 20, 20, 0, 0, 0 },
		{ 5, -5, -10, 0, 0, -10, -5, 5 },
		{ 5, 10, 10, -20, -20, 10, 10, 5 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 }
	};

	public static final int[][] PAWNS_END = {
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 80, 80, 80, 80, 80, 80, 80, 80 },
		{ 50, 50, 50, 50, 50, 50, 50, 50 },
		{ 30, 30, 30, 30, 30, 30, 30, 30 },
		{ 20, 20, 20, 20, 20, 20, 20, 20 },
		{ 10, 10, 10, 10, 10, 10, 10, 10 },
		{ 10, 10, 10, 10, 10, 10, 10, 10 },
		{ 0, 0, 0, 0, 0, 0, 0, 0 }
	};

	public static final int[][] ROOKS = {
		{ 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 5, 10, 10, 10, 10, 10, 10, 5 },
		{ -5, 0, 0, 0, 0, 0, 0, -5 },
		{ -5, 0, 0, 0, 0, 0, 0, -5 },
		{ -5, 0, 0, 0, 0, 0, 0, -5 },
		{ -5, 0, 0, 0, 0, 0, 0, -5 },
		{ -5, 0, 0, 0, 0, 0, 0, -5 },
		{ 0, 0, 0, 5, 5, 0, 0, 0 }
	};

	public static final int[][] KNIGHTS = {
		{ -50, -40, -30, -30, -30, -30, -40, -50 },
		{ -40, -20, 0, 0, 0, 0, -20, -40 },
		{ -30, 0, 10, 15, 15, 10, 0, -30 },
		{ -30, 5, 15, 20, 20, 15, 5, -30 },
		{ -30, 0, 15, 20, 20, 15, 0, -30 },
		{ -30, 5, 10, 15, 15, 10, 5, -30 },
		{ -40, -20, 0, 5, 5, 0, -20, -40 },
		{ -50, -40, -30, -30, -30, -30, -40, -50 }
	};

	public static final int[][] BISHOPS = {
		{ -20, -10, -10, -10, -10, -10, -10, -20 },
		{ -10, 0, 0, 0, 0, 0, 0, -10 },
		{ -10, 0, 5, 10, 10, 5, 0, -10 },
		{ -10, 5, 5, 10, 10, 5, 5, -10 },
		{ -10, 0, 10, 10, 10, 10, 0, -10 },
		{ -10, 10, 10, 10, 10, 10, 10, -10 },
		{ -10, 5, 0, 0, 0, 0, 5, -10 },
		{ -20, -10, -10, -10, -10, -10, -10, -20 }
	};

	public static final int[][] QUEENS = {
		{ -20, -10, -10, -5, -5, -10, -10, -20 },
		{ -10, 0, 0, 0, 0, 0, 0, -10 },
		{ -10, 0, 5, 5, 5, 5, 0, -10 },
		{ -5, 0, 5, 5, 5, 5, 0, -5 },
		{ 0, 0, 5, 5, 5, 5, 0, -5 },
		{ -10, 5, 5, 5, 5, 5, 0, -10 },
		{ -10, 0, 5, 0, 0, 0, 0, -10 },
		{ -20, -10, -10, -5, -5, -10, -10, -20 }
	};

	public static final int[][] KING_START = {
		{ -80, -70, -70, -70, -70, -70, -70, -80 },
		{ -60, -60, -60, -60, -60, -60, -60, -60 },
		{ -40, -50, -50, -60, -60, -50, -50, -40 },
		{ -30, -40, -40, -50, -50, -40, -40, -30 },
		{ -20, -30, -30, -40, -40, -30, -30, -20 },
		{ -10, -20, -20, -20, -20, -20, -20, -10 },
		{ 20, 20, -5, -5, -5, -5, 20, 20 },
		{ 20, 30, 10, 0, 0, 10, 30, 20 }
	};

	public static final int[][] KING_END = {
		{ -20, -10, -10, -10, -10, -10, -10, -20 },
		{ -5, 0, 5, 5, 5, 5, 0, -5 },
		{ -10, -5, 20, 30, 30, 20, -5, -10 },
		{ -15, -10, 35, 45, 45, 35, -10, -15 },
		{ -20, -15, 30, 40, 40, 30, -15, -20 },
		{ -25, -20, 20, 25, 25, 20, -20, -25 },
		{ -30, -25, 0, 0, 0, 0, -25, -30 },
		{ -50, -30, -30, -30, -30, -30, -30, -50 }
	};

	/**
	 * Horizontally flips the given table (reverses the row order).
	 *
	 * @param table the original table.
	 * @return a new table with the rows reversed.
	 */
	public static int[][] horizontalFlip(int[][] table) {
		int[][] newTable = new int[table.length][table[0].length];
		for (int i = 0; i < table.length; i++) {
			newTable[i] = Arrays.copyOf(table[table.length - 1 - i], table[table.length - 1 - i].length);
		}
		return newTable;
	}
}
